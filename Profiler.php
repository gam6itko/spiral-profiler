<?php
/**
 * Spiral Framework.
 *
 * @license   MIT
 * @author    Anton Titov (Wolfy-J)
 * @copyright Â©2009-2015
 */
namespace Spiral\Profiler;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Spiral\Components\Debug\Debugger;
use Spiral\Components\Http\MiddlewareInterface;
use Spiral\Components\Http\Response;
use Spiral\Components\Modules\Definition;
use Spiral\Components\Modules\Installer;
use Spiral\Components\Modules\Module;
use Spiral\Components\View\ViewManager;
use Spiral\Components\View\ViewConfig;
use Spiral\Core\Component\LoggerTrait;

class Profiler extends Module implements MiddlewareInterface
{
    /**
     * Nice looking handle() method.
     */
    use LoggerTrait;

    /**
     * View component is required for rendering.
     *
     * @var ViewManager
     */
    protected $view = null;

    /**
     * New Profiler module instance.
     *
     * @param ViewManager $view
     */
    public function __construct(ViewManager $view)
    {
        $this->view = $view;
    }

    /**
     * Handle request generate response. Middleware used to alter incoming Request and/or Response
     * generated by inner pipeline layers.
     *
     * @param ServerRequestInterface $request Server request instance.
     * @param \Closure               $next    Next middleware/target.
     * @param object|null            $context Pipeline context, can be HttpDispatcher, Route or module.
     * @return Response
     */
    public function __invoke(ServerRequestInterface $request, \Closure $next = null, $context = null)
    {
        $started = microtime(true);

        self::logger()->info('Profiler module started.');
        $response = $next();

        $elapsed = microtime(true) - $started;

        return $this->mount($request, $response, $started, $elapsed);
    }

    /**
     * Mount profiler panel to response.
     *
     * @param ServerRequestInterface   $request Server request instance.
     * @param ResponseInterface|string $response
     * @param float                    $started Time when profiler was activated.
     * @param float                    $elapsed Elapsed time.
     * @return mixed
     */
    protected function mount(ServerRequestInterface $request, ResponseInterface $response, $started = 0.0, $elapsed = 0.0)
    {
        if ($response->getHeader('Content-Type'))
        {
            //Profiler will not mount it's panel if content type is not empty
            return $response;
        }

        if ($response->getBody()->isWritable())
        {
            $panel = $this->view->render('profiler:panel', array(
                'request' => $request,
                'started' => $started,
                'elapsed' => $elapsed
            ));

            $response->getBody()->write($panel);
        }

        return $response;
    }

    /**
     * Module installer responsible for operations like copying resources, registering configs, view
     * namespaces and declaring that bootstrap() call is required.
     * This method is static as it should be called without constructing module object.
     *
     * @param Definition $definition Module definition fetched or generated of composer file.
     * @return Installer
     */
    public static function getInstaller(Definition $definition)
    {
        $installer = parent::getInstaller($definition);

        //Registering view namespace
        $installer->registerConfig(ViewConfig::make(array(
            'baseDirectory' => $definition->getLocation()
        ))->addNamespace('profiler', 'views'));

        //Public resources
        $installer->registerDirectory('/', 'public');

        return $installer;
    }
}